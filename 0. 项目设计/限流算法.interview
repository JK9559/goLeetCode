https://www.iphpt.com/detail/106
1. 计数器

2. 滑动窗口
算法设计：假设限制为 t秒内 访问x次
使用redis的sorted set数据结构，key为某用户的某种操作类型，score为当前的毫秒时间戳，value为全局唯一流水号
首先 zadd 在某个时刻 某个用户的某种操作类型被统计，score为当前时间戳。
然后 zremrangebyscore 从0时刻 到 当前时刻-t*1000（毫秒）
然后 zcard 统计 当前key的 信息个数 如果超过次数了 拒绝 否则接收

3. 漏斗
算法设计：
首先设计漏斗的数据结构：总容量 漏水速度 当前剩余容量 上次漏水时间
每次请求设计为向漏斗里注入1单位的水 如果可注入则成功 不可注入则被限制
每次请求都要获取当前的漏斗的剩余容量，计算方法为 当前剩余容量-（漏水速度*（当前时间-上次漏水的时间））

4. 令牌桶
算法设计：
首先是令牌桶的数据结构：桶的容量 生成令牌的速度 当前令牌数量 上次使用令牌的时间
类似漏斗算法 判断条件是 令牌的个数是否大于0
每次请求都生成令牌 令牌数=当前令牌+生成令牌速度*(当前时间-上次生成令牌时间)


eureka 的限流器 使用了令牌桶
http://www.iocoder.cn/Eureka/rate-limiter/?vip